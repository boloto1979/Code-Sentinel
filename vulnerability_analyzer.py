import re

def find_code_injection_vulnerabilities(code):
    pattern = r'eval\s*\(|exec\s*\(|os\.system\s*\(|subprocess\.run\s*\(|\$\(|`.*`'
    matches = re.finditer(pattern, code)
    vulnerabilities = []
    for match in matches:
        vulnerability = {
            'type': 'Code Injection',
            'pattern': match.group(),
            'line_number': code.count('\n', 0, match.start()) + 1
        }
        vulnerabilities.append(vulnerability)
    return vulnerabilities

def find_xss_vulnerabilities(code):
    pattern = r'<script>.*</script>|<img.*src=.*onerror=.*>'
    matches = re.finditer(pattern, code)
    vulnerabilities = []
    for match in matches:
        vulnerability = {
            'type': 'XSS (Cross-Site Scripting)',
            'pattern': match.group(),
            'line_number': code.count('\n', 0, match.start()) + 1
        }
        vulnerabilities.append(vulnerability)
    return vulnerabilities

def find_sql_injection_vulnerabilities(code):
    pattern = r'SELECT\s+\*|DROP\s+TABLE|DELETE\s+FROM'
    matches = re.finditer(pattern, code, re.IGNORECASE)
    vulnerabilities = []
    for match in matches:
        vulnerability = {
            'type': 'SQL Injection',
            'pattern': match.group(),
            'line_number': code.count('\n', 0, match.start()) + 1
        }
        vulnerabilities.append(vulnerability)
    return vulnerabilities

def find_csrf_vulnerabilities(code):
    # Implemente a detecção de vulnerabilidades CSRF aqui
    return []

def find_ssrf_vulnerabilities(code):
    # Implemente a detecção de vulnerabilidades SSRF aqui
    return []

def find_vulnerabilities(code):
    vulnerabilities = []
    vulnerabilities += find_code_injection_vulnerabilities(code)
    vulnerabilities += find_xss_vulnerabilities(code)
    vulnerabilities += find_sql_injection_vulnerabilities(code)
    vulnerabilities += find_csrf_vulnerabilities(code)
    vulnerabilities += find_ssrf_vulnerabilities(code)
    return vulnerabilities
